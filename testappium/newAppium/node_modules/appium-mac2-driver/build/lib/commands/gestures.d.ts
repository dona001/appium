export default commands;
export type SetValueOptions = {
    /**
     * uuid of the element to set value for
     */
    elementId: string;
    /**
     * value to set. Could also be an array
     */
    value: any;
    /**
     * text to set. If both value and text are set
     * then `value` is preferred
     */
    text: string;
    /**
     * if set then the given key modifiers will be
     * applied while the element value is being set. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type ClickOptions = {
    /**
     * uuid of the element to click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type ScrollOptions = {
    /**
     * uuid of the element to be scrolled. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * scroll X coordinate
     */
    x: number;
    /**
     * scroll Y coordinate
     */
    y: number;
    /**
     * horizontal delta as float number
     */
    deltaX: number;
    /**
     * vertical delta as float number
     */
    deltaY: number;
    /**
     * if set then the given key modifiers will be
     * applied while scroll is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type SwipeOptions = {
    /**
     * uuid of the element to be swiped. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * swipe X coordinate
     */
    x: number;
    /**
     * swipe Y coordinate
     */
    y: number;
    /**
     * either 'up', 'down', 'left' or 'right'
     */
    direction: string;
    /**
     * The value is measured in pixels per second and same
     * values could behave differently on different devices depending on their display
     * density. Higher values make swipe gesture faster (which usually scrolls larger
     * areas if we apply it to a list) and lower values slow it down.
     * Only values greater than zero have effect.
     */
    velocity: number;
    /**
     * if set then the given key modifiers will be
     * applied while scroll is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type RightClickOptions = {
    /**
     * uuid of the element to click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type HoverOptions = {
    /**
     * uuid of the element to hover. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while hover is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type DoubleClickOptions = {
    /**
     * uuid of the element to double click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while double click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type ClickAndDragOptions = {
    /**
     * uuid of the element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    sourceElementId: string;
    /**
     * uuid of the element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    destinationElementId: string;
    /**
     * starting X coordinate
     */
    startX: number;
    /**
     * starting Y coordinate
     */
    startY: number;
    /**
     * ending X coordinate
     */
    endX: number;
    /**
     * ending Y coordinate
     */
    endY: number;
    /**
     * long click duration in float seconds
     */
    duration: number;
    /**
     * if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type ClickAndDragAndHoldOptions = {
    /**
     * uuid of the element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    sourceElementId: string;
    /**
     * uuid of the element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    destinationElementId: string;
    /**
     * starting X coordinate
     */
    startX: number;
    /**
     * starting Y coordinate
     */
    startY: number;
    /**
     * ending X coordinate
     */
    endX: number;
    /**
     * ending Y coordinate
     */
    endY: number;
    /**
     * long click duration in float seconds
     */
    duration: number;
    /**
     * touch hold duration in float seconds
     */
    holdDuration: number;
    /**
     * dragging velocity in pixels per second.
     * If not provided then the default velocity is used. See
     * https://developer.apple.com/documentation/xctest/xcuigesturevelocity
     * for more details
     */
    velocity: number;
    /**
     * if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type KeyOptions = {
    /**
     * a string, that represents a key to type (see
     * https://developer.apple.com/documentation/xctest/xcuielement/1500604-typekey?language=objc
     * and https://developer.apple.com/documentation/xctest/xcuikeyboardkey?language=objc)
     */
    key: string;
    /**
     * a set of modifier flags
     * (https://developer.apple.com/documentation/xctest/xcuikeymodifierflags?language=objc)
     * to use when typing the key.
     */
    modifierFlags: number;
};
export type KeysOptions = {
    /**
     * uuid of the element to send keys to.
     * If the element is not provided then the keys will be sent to the current application.
     */
    elementId: string;
    /**
     * Array of keys to type.
     * Each item could either be a string, that represents a key itself (see
     * https://developer.apple.com/documentation/xctest/xcuielement/1500604-typekey?language=objc
     * and https://developer.apple.com/documentation/xctest/xcuikeyboardkey?language=objc)
     * or a dictionary, if the key should also be entered with modifiers.
     */
    keys: (KeyOptions | string)[];
};
export type PressOptions = {
    /**
     * uuid of the Touch Bar element to be pressed. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     */
    elementId: string;
    /**
     * long click X coordinate
     */
    x: number;
    /**
     * long click Y coordinate
     */
    y: number;
    /**
     * the number of float seconds to hold the mouse button
     */
    duration: number;
    /**
     * if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type TapOptions = {
    /**
     * uuid of the Touch Bar element to tap. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type DoubleTapOptions = {
    /**
     * uuid of the Touch Bar element to tap. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     */
    elementId: string;
    /**
     * click X coordinate
     */
    x: number;
    /**
     * click Y coordinate
     */
    y: number;
    /**
     * if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type PressAndDragOptions = {
    /**
     * uuid of a Touch Bar element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    sourceElementId: string;
    /**
     * uuid of a Touch Bar element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    destinationElementId: string;
    /**
     * starting X coordinate
     */
    startX: number;
    /**
     * starting Y coordinate
     */
    startY: number;
    /**
     * ending X coordinate
     */
    endX: number;
    /**
     * ending Y coordinate
     */
    endY: number;
    /**
     * long click duration in float seconds
     */
    duration: number;
    /**
     * if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
export type PressAndDragAndHoldOptions = {
    /**
     * uuid of a Touch Bar element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    sourceElementId: string;
    /**
     * uuid of a Touch Bar element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     */
    destinationElementId: string;
    /**
     * starting X coordinate
     */
    startX: number;
    /**
     * starting Y coordinate
     */
    startY: number;
    /**
     * ending X coordinate
     */
    endX: number;
    /**
     * ending Y coordinate
     */
    endY: number;
    /**
     * long click duration in float seconds
     */
    duration: number;
    /**
     * touch hold duration in float seconds
     */
    holdDuration: number;
    /**
     * dragging velocity in pixels per second.
     * If not provided then the default velocity is used. See
     * https://developer.apple.com/documentation/xctest/xcuigesturevelocity
     * for more details
     */
    velocity: number;
    /**
     * if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    keyModifierFlags: number;
};
declare namespace commands {
    /**
     * @typedef {Object} SetValueOptions
     * @property {string} elementId uuid of the element to set value for
     * @property {any} value value to set. Could also be an array
     * @property {string} text text to set. If both value and text are set
     * then `value` is preferred
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while the element value is being set. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Set value to the given element
     *
     * @param {SetValueOptions} opts
     */
    function macosSetValue(opts: SetValueOptions): Promise<any>;
    /**
     * @typedef {Object} ClickOptions
     * @property {string} elementId uuid of the element to click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform click gesture on an element or by relative/absolute coordinates
     *
     * @param {ClickOptions} opts
     */
    function macosClick(opts: ClickOptions): Promise<any>;
    /**
     * @typedef {Object} ScrollOptions
     * @property {string} elementId uuid of the element to be scrolled. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x scroll X coordinate
     * @property {number} y scroll Y coordinate
     * @property {number} deltaX horizontal delta as float number
     * @property {number} deltaY vertical delta as float number
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while scroll is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform scroll gesture on an element or by relative/absolute coordinates
     *
     * @param {ScrollOptions} opts
     */
    function macosScroll(opts: ScrollOptions): Promise<any>;
    /**
     * @typedef {Object} SwipeOptions
     * @property {string} elementId uuid of the element to be swiped. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x swipe X coordinate
     * @property {number} y swipe Y coordinate
     * @property {string} direction either 'up', 'down', 'left' or 'right'
     * @property {number} velocity The value is measured in pixels per second and same
     * values could behave differently on different devices depending on their display
     * density. Higher values make swipe gesture faster (which usually scrolls larger
     * areas if we apply it to a list) and lower values slow it down.
     * Only values greater than zero have effect.
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while scroll is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform swipe gesture on an element
     *
     * @param {SwipeOptions} opts
     */
    function macosSwipe(opts: SwipeOptions): Promise<any>;
    /**
     * @typedef {Object} RightClickOptions
     * @property {string} elementId uuid of the element to click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform right click gesture on an element or by relative/absolute coordinates
     *
     * @param {RightClickOptions} opts
     */
    function macosRightClick(opts: RightClickOptions): Promise<any>;
    /**
     * @typedef {Object} HoverOptions
     * @property {string} elementId uuid of the element to hover. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while hover is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform hover gesture on an element or by relative/absolute coordinates
     *
     * @param {HoverOptions} opts
     */
    function macosHover(opts: HoverOptions): Promise<any>;
    /**
     * @typedef {Object} DoubleClickOptions
     * @property {string} elementId uuid of the element to double click. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while double click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform double click gesture on an element or by relative/absolute coordinates
     *
     * @param {DoubleClickOptions} opts
     */
    function macosDoubleClick(opts: DoubleClickOptions): Promise<any>;
    /**
     * @typedef {Object} ClickAndDragOptions
     * @property {string} sourceElementId uuid of the element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {string} destinationElementId uuid of the element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {number} startX starting X coordinate
     * @property {number} startY starting Y coordinate
     * @property {number} endX ending X coordinate
     * @property {number} endY ending Y coordinate
     * @property {number} duration long click duration in float seconds
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform long click and drag gesture on an element or by absolute coordinates
     *
     * @param {ClickAndDragOptions} opts
     */
    function macosClickAndDrag(opts: ClickAndDragOptions): Promise<any>;
    /**
     * @typedef {Object} ClickAndDragAndHoldOptions
     * @property {string} sourceElementId uuid of the element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {string} destinationElementId uuid of the element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {number} startX starting X coordinate
     * @property {number} startY starting Y coordinate
     * @property {number} endX ending X coordinate
     * @property {number} endY ending Y coordinate
     * @property {number} duration long click duration in float seconds
     * @property {number} holdDuration touch hold duration in float seconds
     * @property {number} velocity dragging velocity in pixels per second.
     * If not provided then the default velocity is used. See
     * https://developer.apple.com/documentation/xctest/xcuigesturevelocity
     * for more details
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform long click, drag and hold gesture on an element or by absolute coordinates
     *
     * @param {ClickAndDragAndHoldOptions} opts
     */
    function macosClickAndDragAndHold(opts: ClickAndDragAndHoldOptions): Promise<any>;
    /**
     * @typedef {Object} KeyOptions
     * @property {string} key a string, that represents a key to type (see
     * https://developer.apple.com/documentation/xctest/xcuielement/1500604-typekey?language=objc
     * and https://developer.apple.com/documentation/xctest/xcuikeyboardkey?language=objc)
     * @property {number} modifierFlags a set of modifier flags
     * (https://developer.apple.com/documentation/xctest/xcuikeymodifierflags?language=objc)
     * to use when typing the key.
     */
    /**
     * @typedef {Object} KeysOptions
     * @property {string} elementId uuid of the element to send keys to.
     * If the element is not provided then the keys will be sent to the current application.
     * @property {(KeyOptions|string)[]} keys Array of keys to type.
     * Each item could either be a string, that represents a key itself (see
     * https://developer.apple.com/documentation/xctest/xcuielement/1500604-typekey?language=objc
     * and https://developer.apple.com/documentation/xctest/xcuikeyboardkey?language=objc)
     * or a dictionary, if the key should also be entered with modifiers.
     */
    /**
     * Send keys to the given element or to the application under test
     *
     * @param {KeysOptions} opts
     */
    function macosKeys(opts: KeysOptions): Promise<any>;
    /**
     * @typedef {Object} PressOptions
     * @property {string} elementId uuid of the Touch Bar element to be pressed. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     * @property {number} x long click X coordinate
     * @property {number} y long click Y coordinate
     * @property {number} duration the number of float seconds to hold the mouse button
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform press gesture on a Touch Bar element or by relative/absolute coordinates
     *
     * @param {PressOptions} opts
     */
    function macosPressAndHold(opts: PressOptions): Promise<any>;
    /**
     * @typedef {Object} TapOptions
     * @property {string} elementId uuid of the Touch Bar element to tap. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform tap gesture on a Touch Bar element or by relative/absolute coordinates
     *
     * @param {TapOptions} opts
     */
    function macosTap(opts: TapOptions): Promise<any>;
    /**
     * @typedef {Object} DoubleTapOptions
     * @property {string} elementId uuid of the Touch Bar element to tap. Either this property
     * or/and x and y must be set. If both are set then x and y are considered as relative
     * element coordinates. If only x and y are set then these are parsed as
     * absolute Touch Bar coordinates.
     * @property {number} x click X coordinate
     * @property {number} y click Y coordinate
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while click is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform tap gesture on a Touch Bar element or by relative/absolute coordinates
     *
     * @param {DoubleTapOptions} opts
     */
    function macosDoubleTap(opts: DoubleTapOptions): Promise<any>;
    /**
     * @typedef {Object} PressAndDragOptions
     * @property {string} sourceElementId uuid of a Touch Bar element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {string} destinationElementId uuid of a Touch Bar element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {number} startX starting X coordinate
     * @property {number} startY starting Y coordinate
     * @property {number} endX ending X coordinate
     * @property {number} endY ending Y coordinate
     * @property {number} duration long click duration in float seconds
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform long press and drag gesture on a Touch Bar element or by absolute coordinates
     *
     * @param {PressAndDragOptions} opts
     */
    function macosPressAndDrag(opts: PressAndDragOptions): Promise<any>;
    /**
     * @typedef {Object} PressAndDragAndHoldOptions
     * @property {string} sourceElementId uuid of a Touch Bar element to start the drag from. Either this property
     * and `destinationElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {string} destinationElementId uuid of a Touch Bar element to end the drag on. Either this property
     * and `sourceElement` must be provided or `startX`, `startY`, `endX`, `endY` coordinates
     * must be set.
     * @property {number} startX starting X coordinate
     * @property {number} startY starting Y coordinate
     * @property {number} endX ending X coordinate
     * @property {number} endY ending Y coordinate
     * @property {number} duration long click duration in float seconds
     * @property {number} holdDuration touch hold duration in float seconds
     * @property {number} velocity dragging velocity in pixels per second.
     * If not provided then the default velocity is used. See
     * https://developer.apple.com/documentation/xctest/xcuigesturevelocity
     * for more details
     * @property {number} keyModifierFlags if set then the given key modifiers will be
     * applied while drag is performed. See
     * https://developer.apple.com/documentation/xctest/xcuikeymodifierflags
     * for more details
     */
    /**
     * Perform press, drag and hold gesture on a Touch Bar element or by absolute Touch Bar coordinates
     *
     * @param {PressAndDragAndHoldOptions} opts
     */
    function macosPressAndDragAndHold(opts: PressAndDragAndHoldOptions): Promise<any>;
}
//# sourceMappingURL=gestures.d.ts.map