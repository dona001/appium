export default commands;
export type LaunchAppOptions = {
    /**
     * Bundle identifier of the app to be launched
     * or activated. Either this property or `path` must be provided
     */
    bundleId?: string | undefined;
    /**
     * Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    path?: string | undefined;
    /**
     * the list of command line arguments
     * for the app to be be launched with. This parameter is ignored if the app
     * is already running.
     */
    arguments: string[];
    /**
     * environment variables mapping. Custom
     * variables are added to the default process environment.
     */
    environment: any;
};
export type ActivateAppOptions = {
    /**
     * Bundle identifier of the app to be activated.
     * Either this property or `path` must be provided
     */
    bundleId?: string | undefined;
    /**
     * Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    path?: string | undefined;
};
export type TerminateAppOptions = {
    /**
     * Bundle identifier of the app to be terminated.
     * Either this property or `path` must be provided
     */
    bundleId?: string | undefined;
    /**
     * Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    path?: string | undefined;
};
export type QueryAppStateOptions = {
    /**
     * Bundle identifier of the app whose state should be queried.
     * Either this property or `path` must be provided
     */
    bundleId?: string | undefined;
    /**
     * Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    path?: string | undefined;
};
declare namespace commands {
    /**
     * @typedef {Object} LaunchAppOptions
     * @property {string} [bundleId] Bundle identifier of the app to be launched
     * or activated. Either this property or `path` must be provided
     * @property {string} [path] Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     * @property {string[]} arguments the list of command line arguments
     * for the app to be be launched with. This parameter is ignored if the app
     * is already running.
     * @property {Object} environment environment variables mapping. Custom
     * variables are added to the default process environment.
     */
    /**
     * Start an app with given bundle identifier or activates it
     * if the app is already running. An exception is thrown if the
     * app with the given identifier cannot be found.
     *
     * @param {LaunchAppOptions} opts
     */
    function macosLaunchApp(opts: LaunchAppOptions): Promise<any>;
    /**
     * @typedef {Object} ActivateAppOptions
     * @property {string} [bundleId] Bundle identifier of the app to be activated.
     * Either this property or `path` must be provided
     * @property {string} [path] Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    /**
     * Activate an app with given bundle identifier. An exception is thrown if the
     * app cannot be found or is not running.
     *
     * @param {ActivateAppOptions} opts
     */
    function macosActivateApp(opts: ActivateAppOptions): Promise<any>;
    /**
     * @typedef {Object} TerminateAppOptions
     * @property {string} [bundleId] Bundle identifier of the app to be terminated.
     * Either this property or `path` must be provided
     * @property {string} [path] Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    /**
     * Terminate an app with given bundle identifier. An exception is thrown if the
     * app cannot be found.
     *
     * @param {TerminateAppOptions} opts
     * @returns {Promise<boolean>} `true` if the app was running and has been successfully terminated.
     * `false` if the app was not running before.
     */
    function macosTerminateApp(opts: TerminateAppOptions): Promise<boolean>;
    /**
     * @typedef {Object} QueryAppStateOptions
     * @property {string} [bundleId] Bundle identifier of the app whose state should be queried.
     * Either this property or `path` must be provided
     * @property {string} [path] Full path to the app bundle. Either this property
     * or `bundleId` must be provided
     */
    /**
     * Query an app state with given bundle identifier. An exception is thrown if the
     * app cannot be found.
     *
     * @param {QueryAppStateOptions} opts
     * @returns {Promise<number>} The application state code. See
     * https://developer.apple.com/documentation/xctest/xcuiapplicationstate?language=objc
     * for more details
     */
    function macosQueryAppState(opts: QueryAppStateOptions): Promise<number>;
}
//# sourceMappingURL=app-management.d.ts.map