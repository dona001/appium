export default commands;
/**
 * A dictionary where each key contains a unique display identifier
 * and values are dictionaries with following items:
 * - id: Display identifier
 * - isMain: Whether this display is the main one
 * - payload: The actual PNG screenshot data encoded to base64 string
 */
export type ScreenshotsInfo = any;
export type ScreenshotsOpts = {
    /**
     * macOS display identifier to take a screenshot for.
     * If not provided then screenshots of all displays are going to be returned.
     * If no matches were found then an error is thrown.
     */
    displayId: number;
};
export namespace commands {
    /**
     * @typedef {Object} ScreenshotsInfo
     *
     * A dictionary where each key contains a unique display identifier
     * and values are dictionaries with following items:
     * - id: Display identifier
     * - isMain: Whether this display is the main one
     * - payload: The actual PNG screenshot data encoded to base64 string
     */
    /**
     * @typedef {Object} ScreenshotsOpts
     * @property {number} displayId macOS display identifier to take a screenshot for.
     * If not provided then screenshots of all displays are going to be returned.
     * If no matches were found then an error is thrown.
     */
    /**
     * Retrieves screenshots of each display available to macOS
     *
     * @param {ScreenshotsOpts} opts
     * @returns {Promise<ScreenshotsInfo>}
     */
    function macosScreenshots(opts: ScreenshotsOpts): Promise<any>;
}
//# sourceMappingURL=screenshots.d.ts.map