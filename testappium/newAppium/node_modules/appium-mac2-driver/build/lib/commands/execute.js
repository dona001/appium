"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const logger_1 = __importDefault(require("../logger"));
const commands = {};
const EXTENSION_COMMANDS_MAPPING = {
    setValue: 'macosSetValue',
    click: 'macosClick',
    scroll: 'macosScroll',
    swipe: 'macosSwipe',
    rightClick: 'macosRightClick',
    hover: 'macosHover',
    doubleClick: 'macosDoubleClick',
    clickAndDrag: 'macosClickAndDrag',
    clickAndDragAndHold: 'macosClickAndDragAndHold',
    keys: 'macosKeys',
    tap: 'macosTap',
    doubleTap: 'macosDoubleTap',
    press: 'macosPress',
    pressAndDrag: 'macosPressAndDrag',
    pressAndDragAndHold: 'macosPressAndDragAndHold',
    source: 'macosSource',
    launchApp: 'macosLaunchApp',
    activateApp: 'macosActivateApp',
    terminateApp: 'macosTerminateApp',
    queryAppState: 'macosQueryAppState',
    appleScript: 'macosExecAppleScript',
    startRecordingScreen: 'startRecordingScreen',
    stopRecordingScreen: 'stopRecordingScreen',
    screenshots: 'macosScreenshots',
};
commands.execute = async function execute(script, args) {
    if (script.match(/^macos:/)) {
        logger_1.default.info(`Executing extension command '${script}'`);
        script = script.replace(/^macos:/, '').trim();
        return await this.executeMacosCommand(script, lodash_1.default.isArray(args) ? args[0] : args);
    }
    throw new driver_1.errors.NotImplementedError();
};
commands.executeMacosCommand = async function executeMacosCommand(command, opts = {}) {
    if (!lodash_1.default.has(EXTENSION_COMMANDS_MAPPING, command)) {
        throw new driver_1.errors.UnknownCommandError(`Unknown extension command "${command}". ` +
            `Only ${lodash_1.default.keys(EXTENSION_COMMANDS_MAPPING)} commands are supported.`);
    }
    return await this[EXTENSION_COMMANDS_MAPPING[command]](opts);
};
exports.default = commands;
//# sourceMappingURL=execute.js.map