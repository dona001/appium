export default commands;
export type StartRecordingOptions = {
    /**
     * - The video filter spec to apply for ffmpeg.
     * See https://trac.ffmpeg.org/wiki/FilteringGuide for more details on the possible values.
     * Example: Set it to `scale=ifnot(gte(iw\,1024)\,iw\,1024):-2` in order to limit the video width
     * to 1024px. The height will be adjusted automatically to match the actual ratio.
     */
    videoFilter: string | null;
    /**
     * [15] - The count of frames per second in the resulting video.
     * The greater fps it has the bigger file size is.
     */
    fps: number | string;
    /**
     * [veryfast] - One of the supported encoding presets. Possible values are:
     * - ultrafast
     * - superfast
     * - veryfast
     * - faster
     * - fast
     * - medium
     * - slow
     * - slower
     * - veryslow
     * A preset is a collection of options that will provide a certain encoding speed to compression ratio.
     * A slower preset will provide better compression (compression is quality per filesize).
     * This means that, for example, if you target a certain file size or constant bit rate, you will achieve better
     * quality with a slower preset. Read https://trac.ffmpeg.org/wiki/Encode/H.264 for more details.
     */
    preset: string;
    /**
     * [false] - Whether to capture the mouse cursor while recording
     * the screen
     */
    captureCursor: boolean;
    /**
     * [false] - Whether to capture mouse clicks while recording the
     * screen
     */
    captureClicks: boolean;
    /**
     * - Screen device index to use for the recording.
     * The list of available devices could be retrieved using
     * `ffmpeg -f avfoundation -list_devices true -i` command.
     */
    deviceId: string | number;
    /**
     * [600] - The maximum recording time, in seconds. The default
     * value is 600 seconds (10 minutes).
     */
    timeLimit: string | number;
    /**
     * [true] - Whether to ignore the call if a screen recording is currently running
     * (`false`) or to start a new recording immediately and terminate the existing one if running (`true`).
     */
    forceRestart: boolean;
};
export type StopRecordingOptions = {
    /**
     * - The path to the remote location, where the resulting video should be uploaded.
     * The following protocols are supported: http/https, ftp.
     * Null or empty string value (the default setting) means the content of resulting
     * file should be encoded as Base64 and passed as the endpoint response value.
     * An exception will be thrown if the generated media file is too big to
     * fit into the available process memory.
     */
    remotePath: string;
    /**
     * - The name of the user for the remote authentication.
     */
    user: string;
    /**
     * - The password for the remote authentication.
     */
    pass: string;
    /**
     * - The http multipart upload method name. The 'PUT' one is used by default.
     */
    method: string;
    /**
     * - Additional headers mapping for multipart http(s) uploads
     */
    headers: any;
    /**
     * [file] - The name of the form field, where the file content BLOB should be stored for
     *           http(s) uploads
     */
    fileFieldName: string;
    /**
     * - Additional form fields for multipart http(s) uploads
     */
    formFields: any | [string, string][];
};
declare namespace commands {
    /**
     * @typedef {Object} StartRecordingOptions
     *
     * @property {?string} videoFilter - The video filter spec to apply for ffmpeg.
     * See https://trac.ffmpeg.org/wiki/FilteringGuide for more details on the possible values.
     * Example: Set it to `scale=ifnot(gte(iw\,1024)\,iw\,1024):-2` in order to limit the video width
     * to 1024px. The height will be adjusted automatically to match the actual ratio.
     * @property {number|string} fps [15] - The count of frames per second in the resulting video.
     * The greater fps it has the bigger file size is.
     * @property {string} preset [veryfast] - One of the supported encoding presets. Possible values are:
     * - ultrafast
     * - superfast
     * - veryfast
     * - faster
     * - fast
     * - medium
     * - slow
     * - slower
     * - veryslow
     * A preset is a collection of options that will provide a certain encoding speed to compression ratio.
     * A slower preset will provide better compression (compression is quality per filesize).
     * This means that, for example, if you target a certain file size or constant bit rate, you will achieve better
     * quality with a slower preset. Read https://trac.ffmpeg.org/wiki/Encode/H.264 for more details.
     * @property {boolean} captureCursor [false] - Whether to capture the mouse cursor while recording
     * the screen
     * @property {boolean} captureClicks [false] - Whether to capture mouse clicks while recording the
     * screen
     * @property {!string|number} deviceId - Screen device index to use for the recording.
     * The list of available devices could be retrieved using
     * `ffmpeg -f avfoundation -list_devices true -i` command.
     * @property {string|number} timeLimit [600] - The maximum recording time, in seconds. The default
     * value is 600 seconds (10 minutes).
     * @property {boolean} forceRestart [true] - Whether to ignore the call if a screen recording is currently running
     * (`false`) or to start a new recording immediately and terminate the existing one if running (`true`).
     */
    /**
     * Record the display in background while the automated test is running.
     * This method requires FFMPEG (https://www.ffmpeg.org/download.html) to be installed
     * and present in PATH. Also, the Appium process must be allowed to access screen recording
     * in System Preferences->Security & Privacy->Screen Recording.
     * The resulting video uses H264 codec and is ready to be played by media players built-in into web browsers.
     *
     * @param {StartRecordingOptions} options - The available options.
     * @this {import('../driver').Mac2Driver}
     * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
     */
    function startRecordingScreen(this: import("../driver").Mac2Driver, options: StartRecordingOptions): Promise<void>;
    /**
     * @typedef {Object} StopRecordingOptions
     *
     * @property {string} remotePath - The path to the remote location, where the resulting video should be uploaded.
     * The following protocols are supported: http/https, ftp.
     * Null or empty string value (the default setting) means the content of resulting
     * file should be encoded as Base64 and passed as the endpoint response value.
     * An exception will be thrown if the generated media file is too big to
     * fit into the available process memory.
     * @property {string} user - The name of the user for the remote authentication.
     * @property {string} pass - The password for the remote authentication.
     * @property {string} method - The http multipart upload method name. The 'PUT' one is used by default.
     * @property {Object} headers - Additional headers mapping for multipart http(s) uploads
     * @property {string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for
     *                                            http(s) uploads
     * @property {Object|[string, string][]} formFields - Additional form fields for multipart http(s) uploads
     */
    /**
     * Stop recording the screen.
     * If no screen recording has been started before then the method returns an empty string.
     *
     * @param {StopRecordingOptions} options - The available options.
     * @returns {Promise<string>} Base64-encoded content of the recorded media file if 'remotePath'
     * parameter is falsy or an empty string.
     * @this {import('../driver').Mac2Driver}
     * @throws {Error} If there was an error while getting the name of a media file
     * or the file content cannot be uploaded to the remote location
     * or screen recording is not supported on the device under test.
     */
    function stopRecordingScreen(this: import("../driver").Mac2Driver, options: StopRecordingOptions): Promise<string>;
}
//# sourceMappingURL=record-screen.d.ts.map