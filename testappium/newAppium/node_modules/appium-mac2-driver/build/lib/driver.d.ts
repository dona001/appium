/// <reference types="node" />
/// <reference types="node" />
export class Mac2Driver extends BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord> {
    static newMethodMap: {
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
    };
    constructor(opts?: {});
    /** @type {boolean} */
    isProxyActive: boolean;
    /** @type {(toRun: {command?: string; script?: string}) => Promise<string>} */
    macosExecAppleScript: (toRun: {
        command?: string;
        script?: string;
    }) => Promise<string>;
    desiredCapConstraints: {
        systemPort: {
            isNumber: boolean;
        };
        systemHost: {
            isString: boolean;
        };
        showServerLogs: {
            isBoolean: boolean;
        };
        bootstrapRoot: {
            isString: boolean;
        };
        serverStartupTimeout: {
            isNumber: boolean;
        };
        bundleId: {
            isString: boolean;
        };
        arguments: {
            isArray: boolean;
        };
        environment: {
            isObject: boolean;
        };
        noReset: {
            isBoolean: boolean;
        };
        skipAppKill: {
            isBoolean: boolean;
        };
        prerun: {
            isObject: boolean;
        };
        postrun: {
            isObject: boolean;
        };
        webDriverAgentMacUrl: {
            isString: boolean;
        };
        appPath: {
            isString: boolean;
        };
    };
    settings: DeviceSettings<{}>;
    onSettingsUpdate(key: any, value: any): Promise<unknown>;
    resetState(): void;
    wda: {
        process: {
            showServerLogs: boolean;
            port: number;
            host: string;
            bootstrapRoot: string;
            proc: import("teen_process").SubProcess | null;
            readonly isRunning: boolean;
            readonly pid: number | null | undefined;
            listChildrenPids(): Promise<string[]>;
            cleanupProjectIfFresh(): Promise<void>;
            hasSameOpts({ showServerLogs, systemPort, systemHost, bootstrapRoot }: {
                showServerLogs: any;
                systemPort: any;
                systemHost: any;
                bootstrapRoot: any;
            }): boolean;
            init(opts?: {}): Promise<boolean>;
            stop(): Promise<void>;
            kill(): Promise<void>;
        } | null;
        serverStartupTimeoutMs: number;
        proxy: {
            didProcessExit: boolean | undefined;
            proxyCommand(url: any, method: any, body?: null): Promise<any>;
            scheme: string;
            server: string;
            port: number;
            base: string;
            reqBasePath: string;
            sessionId: string | null;
            timeout: number;
            _activeRequests: any[];
            _downstreamProtocol: any;
            httpAgent: import("http").Agent;
            httpsAgent: import("https").Agent;
            protocolConverter: import("@appium/base-driver/build/lib/jsonwp-proxy/protocol-converter").default;
            _log: any;
            readonly log: any;
            request: any;
            getActiveRequestsCount(): number;
            cancelActiveRequests(): void;
            endpointRequiresSessionId(endpoint: any): boolean;
            downstreamProtocol: any;
            getUrlForProxy(url: any): string;
            proxy(url: any, method: any, body?: null | undefined): Promise<any[]>;
            getProtocolFromResBody(resObj: any): "MJSONWP" | "W3C" | undefined;
            requestToCommandName(url: string, method: import("@appium/types").HTTPMethod): string | undefined;
            command(url: string, method: import("@appium/types").HTTPMethod, body?: any): Promise<unknown>;
            getSessionIdFromUrl(url: any): any;
            proxyReqRes(req: any, res: any): Promise<void>;
        } | null;
        isProxyingToRemoteServer: boolean;
        isProxyReady(throwOnExit?: boolean): Promise<boolean>;
        parseProxyProperties(caps: any): {
            /**
             * - The scheme proxy to.
             */
            scheme: string;
            /**
             * - The host name proxy to.
             */
            host: string;
            /**
             * - The port number proxy to.
             */
            port: number;
            /**
             * - The path proxy to.
             */
            path: string;
        };
        startSession(caps: any): Promise<void>;
        stopSession(): Promise<void>;
    } | null | undefined;
    proxyReqRes: any;
    _screenRecorder: any;
    proxyActive(sessionId: any): boolean;
    getProxyAvoidList(sessionId: any): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    proxyCommand(url: any, method: any, body?: null): Promise<unknown>;
    getStatus(): Promise<unknown>;
    createSession(...args: any[]): Promise<(string | import("@appium/types").DriverCaps<any>)[]>;
    deleteSession(): Promise<void>;
}
export default Mac2Driver;
import { BaseDriver } from 'appium/driver';
import { DeviceSettings } from 'appium/driver';
//# sourceMappingURL=driver.d.ts.map