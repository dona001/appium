export default GeckoDriverServer;
declare class GeckoDriverServer {
    constructor(log: any, caps: any);
    process: GeckoDriverProcess;
    log: any;
    proxy: GeckoProxy | null;
    get isRunning(): boolean;
    start(geckoCaps: any): Promise<void>;
    stop(): Promise<void>;
}
declare class GeckoDriverProcess {
    constructor(log: any, opts?: {});
    /** @type {boolean|undefined} */
    noReset: boolean | undefined;
    /** @type {string|undefined} */
    verbosity: string | undefined;
    /** @type {string|undefined} */
    androidStorage: string | undefined;
    /** @type {number|undefined} */
    marionettePort: number | undefined;
    /** @type {number|undefined} */
    port: number | undefined;
    log: any;
    proc: SubProcess | null;
    get isRunning(): boolean;
    init(): Promise<void>;
    stop(): Promise<void>;
    kill(): Promise<void>;
}
declare class GeckoProxy extends JWProxy {
    /** @type {boolean|undefined} */
    didProcessExit: boolean | undefined;
    proxyCommand(url: any, method: any, body?: null): Promise<any>;
}
import { SubProcess } from 'teen_process';
import { JWProxy } from 'appium/driver';
//# sourceMappingURL=gecko.d.ts.map