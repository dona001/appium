export default GeckoDriver;
declare class GeckoDriver extends BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord> {
    constructor(opts?: {});
    /** @type {boolean} */
    isProxyActive: boolean;
    desiredCapConstraints: {
        browserName: {
            isString: boolean;
        };
        browserVersion: {
            isString: boolean;
        };
        acceptInsecureCerts: {
            isBoolean: boolean;
        };
        pageLoadStrategy: {
            isString: boolean;
        };
        proxy: {
            isObject: boolean;
        };
        setWindowRect: {
            isBoolean: boolean;
        };
        timeouts: {
            isObject: boolean;
        };
        unhandledPromptBehavior: {
            isString: boolean;
        };
        systemPort: {
            isNumber: boolean;
        };
        marionettePort: {
            isNumber: boolean;
        };
        verbosity: {
            isString: boolean;
            inclusionCaseInsensitive: string[];
        };
        androidStorage: {
            isString: boolean;
            inclusionCaseInsensitive: string[];
        };
        'moz:firefoxOptions': {
            isObject: boolean;
        };
    };
    resetState(): void;
    gecko: GeckoDriverServer | null | undefined;
    proxyReqRes: any;
    proxyActive(): boolean;
    getProxyAvoidList(): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    createSession(...args: any[]): Promise<(string | import("@appium/types").DriverCaps<any>)[]>;
    deleteSession(): Promise<void>;
}
import { BaseDriver } from 'appium/driver';
import GeckoDriverServer from './gecko';
//# sourceMappingURL=driver.d.ts.map