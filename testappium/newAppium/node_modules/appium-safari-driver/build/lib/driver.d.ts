export class SafariDriver extends BaseDriver<any, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<any>, void, import("@appium/types").StringRecord> {
    static newMethodMap: {
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
    };
    constructor(opts?: {});
    /** @type {boolean} */
    isProxyActive: boolean;
    desiredCapConstraints: {
        browserName: {
            isString: boolean;
        };
        browserVersion: {
            isString: boolean;
        };
        acceptInsecureCerts: {
            isBoolean: boolean;
        };
        'safari:platformVersion': {
            isString: boolean;
        };
        'safari:platformBuildVersion': {
            isString: boolean;
        };
        'safari:useSimulator': {
            isBoolean: boolean;
        };
        'safari:deviceType': {
            isString: boolean;
        };
        'safari:deviceName': {
            isString: boolean;
        };
        'safari:deviceUDID': {
            isString: boolean;
        };
        'safari:automaticInspection': {
            isBoolean: boolean;
        };
        'safari:automaticProfiling': {
            isBoolean: boolean;
        };
        'webkit:WebRTC': {
            isObject: boolean;
        };
    };
    resetState(): void;
    safari: SafariDriverServer | null | undefined;
    proxyReqRes: any;
    _screenRecorder: any;
    proxyActive(): boolean;
    getProxyAvoidList(): import("@appium/types").RouteMatcher[];
    canProxy(): boolean;
    createSession(...args: any[]): Promise<(string | import("@appium/types").DriverCaps<any>)[]>;
    deleteSession(): Promise<void>;
}
export default SafariDriver;
import { BaseDriver } from 'appium/driver';
import SafariDriverServer from './safari';
//# sourceMappingURL=driver.d.ts.map