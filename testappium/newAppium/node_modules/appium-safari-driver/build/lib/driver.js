"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafariDriver = void 0;
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const safari_1 = __importDefault(require("./safari"));
const desired_caps_1 = require("./desired-caps");
const index_1 = __importDefault(require("./commands/index"));
const utils_1 = require("./utils");
const method_map_1 = require("./method-map");
/** @type {import('@appium/types').RouteMatcher[]} */
const NO_PROXY = [
    ['GET', new RegExp('^/session/[^/]+/appium')],
    ['POST', new RegExp('^/session/[^/]+/appium')],
    ['POST', new RegExp('^/session/[^/]+/element/[^/]+/elements?$')],
    ['POST', new RegExp('^/session/[^/]+/elements?$')],
    ['DELETE', new RegExp('^/session/[^/]+/cookie$')],
];
class SafariDriver extends driver_1.BaseDriver {
    constructor(opts = {}) {
        // @ts-ignore TODO: make args typed
        super(opts);
        this.desiredCapConstraints = desired_caps_1.desiredCapConstraints;
        this.locatorStrategies = [
            'xpath',
            'tag name',
            'link text',
            'partial link text',
            'css selector',
            // Let these two reach Safari Driver and fail there with a proper error message
            'id',
            'name',
        ];
        this.resetState();
        for (const [cmd, fn] of lodash_1.default.toPairs(index_1.default)) {
            SafariDriver.prototype[cmd] = fn;
        }
    }
    resetState() {
        this.safari = null;
        this.proxyReqRes = null;
        this.isProxyActive = false;
        this._screenRecorder = null;
    }
    proxyActive() {
        return this.isProxyActive;
    }
    getProxyAvoidList() {
        return NO_PROXY;
    }
    canProxy() {
        return true;
    }
    // @ts-ignore TODO: make args typed
    async createSession(...args) {
        // @ts-ignore TODO: make args typed
        const [sessionId, caps] = await super.createSession(...args);
        this.safari = new safari_1.default(this.log);
        try {
            await this.safari.start((0, utils_1.formatCapsForServer)(caps));
        }
        catch (e) {
            await this.deleteSession();
            throw e;
        }
        this.proxyReqRes = this.safari.proxy?.proxyReqRes.bind(this.safari.proxy);
        this.isProxyActive = true;
        return [sessionId, caps];
    }
    async deleteSession() {
        this.log.info('Ending Safari session');
        await this._screenRecorder?.stop(true);
        await this.safari?.stop();
        this.resetState();
        await super.deleteSession();
    }
}
exports.SafariDriver = SafariDriver;
SafariDriver.newMethodMap = method_map_1.newMethodMap;
exports.default = SafariDriver;
//# sourceMappingURL=driver.js.map