"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/no-var-requires
const plugin_test_support_1 = require("@appium/plugin-test-support");
const axios_1 = __importDefault(require("axios"));
const chai_1 = require("chai");
const e2ehelper_1 = require("./e2ehelper");
const ip_1 = __importDefault(require("ip"));
const path_1 = __importDefault(require("path"));
describe('Browserstack Devices', () => {
    // dump hub config into a file
    const hub_config_file = path_1.default.join(__dirname, '../../serverConfig/bs-config.json');
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)();
    // run hub
    (0, plugin_test_support_1.pluginE2EHarness)({
        before: global.before,
        after: global.after,
        serverArgs: {
            subcommand: 'server',
            configFile: hub_config_file,
        },
        pluginName: 'device-farm',
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    const hub_url = `http://${ip_1.default.address()}:${e2ehelper_1.HUB_APPIUM_PORT}`;
    it('Should be able to run the android with Browerstack config', () => __awaiter(void 0, void 0, void 0, function* () {
        let androidDevices = (yield axios_1.default.get(`${hub_url}/device-farm/api/devices/android`)).data;
        androidDevices = androidDevices.filter((device) => device.cloud === 'browserstack');
        delete androidDevices[0].meta;
        delete androidDevices[0]['$loki'];
        (0, chai_1.expect)(androidDevices[0]).to.deep.equal({
            deviceName: 'Google Pixel 3',
            os_version: '9.0',
            platform: 'android',
            host: 'http://hub-cloud.browserstack.com/wd/hub',
            busy: false,
            userBlocked: false,
            deviceType: 'real',
            capability: { deviceName: 'Google Pixel 3', os_version: '9.0', platform: 'android' },
            cloud: 'browserstack',
            name: 'Google Pixel 3',
            sdk: '9.0',
            udid: 'Google Pixel 3',
            offline: false,
            sessionStartTime: 0,
            totalUtilizationTimeMilliSec: null,
        });
    }));
    it('Should be able to run the plugin with Browerstack config', () => __awaiter(void 0, void 0, void 0, function* () {
        const status = (yield axios_1.default.get(`${hub_url}/device-farm/api/devices`)).status;
        (0, chai_1.expect)(status).to.be.eql(200);
    }));
    it('Should be able to get iOS devices from Browerstack config', () => __awaiter(void 0, void 0, void 0, function* () {
        let iosDevices = (yield axios_1.default.get(`${hub_url}/device-farm/api/devices/ios`)).data;
        iosDevices = iosDevices.filter((device) => device.cloud === 'browserstack');
        delete iosDevices[0].meta;
        delete iosDevices[0]['$loki'];
        (0, chai_1.expect)(iosDevices[0]).to.deep.equal({
            deviceName: 'iPhone XS',
            os_version: '15',
            platform: 'ios',
            host: 'http://hub-cloud.browserstack.com/wd/hub',
            busy: false,
            userBlocked: false,
            deviceType: 'real',
            capability: {
                deviceName: 'iPhone XS',
                os_version: '15',
                platform: 'ios',
            },
            cloud: 'browserstack',
            name: 'iPhone XS',
            sdk: '15',
            udid: 'iPhone XS',
            offline: false,
            sessionStartTime: 0,
            totalUtilizationTimeMilliSec: null,
        });
    }));
});
