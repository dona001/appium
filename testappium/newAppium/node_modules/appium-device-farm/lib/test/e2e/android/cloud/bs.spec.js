"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_test_support_1 = require("@appium/plugin-test-support");
const path_1 = __importDefault(require("path"));
const webdriverio_1 = require("webdriverio");
const e2ehelper_1 = require("../../e2ehelper");
const ip_1 = __importDefault(require("ip"));
require("dotenv/config");
const APPIUM_HOST = ip_1.default.address();
const APPIUM_PORT = 4723;
const WDIO_PARAMS = {
    connectionRetryCount: 0,
    hostname: APPIUM_HOST,
    port: APPIUM_PORT,
    logLevel: 'info',
};
const capabilities = {
    platformName: 'android',
    'appium:app': (_a = process.env.CLOUD_APP) !== null && _a !== void 0 ? _a : 'bs://a46a2773fdddf08758c5db6e4b02cf9743f3055d',
    'bstack:options': {
        projectName: 'Login',
        buildName: '1.1',
        sessionName: 'LoginTest',
    },
};
let driver;
describe('Plugin Test', () => {
    // dump hub config into a file
    const hub_config_file = path_1.default.join(__dirname, '../../../../serverConfig/bs-config.json');
    // setup appium home
    const APPIUM_HOME = (0, e2ehelper_1.ensureAppiumHome)();
    // run hub
    (0, plugin_test_support_1.pluginE2EHarness)({
        before: global.before,
        after: global.after,
        serverArgs: {
            subcommand: 'server',
            configFile: hub_config_file,
        },
        pluginName: 'device-farm',
        port: e2ehelper_1.HUB_APPIUM_PORT,
        driverSource: 'npm',
        driverName: 'uiautomator2',
        driverSpec: 'appium-uiautomator2-driver',
        pluginSource: 'local',
        pluginSpec: e2ehelper_1.PLUGIN_PATH,
        appiumHome: APPIUM_HOME,
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        driver = yield (0, webdriverio_1.remote)(Object.assign(Object.assign({}, WDIO_PARAMS), { capabilities }));
    }));
    it('Vertical swipe test', () => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`Device UDID: ${yield driver.capabilities.deviceUDID}`);
        yield driver.performActions([
            {
                type: 'pointer',
                id: 'finger1',
                parameters: { pointerType: 'touch' },
                actions: [
                    { type: 'pointerMove', duration: 0, x: 100, y: 100 },
                    { type: 'pointerDown', button: 0 },
                    { type: 'pause', duration: 500 },
                    { type: 'pointerMove', duration: 1000, origin: 'pointer', x: -50, y: 0 },
                    { type: 'pointerUp', button: 0 },
                ],
            },
        ]);
        console.log('Successfully swiped');
    }));
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield driver.deleteSession();
        });
    });
});
