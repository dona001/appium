"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
const unzipper_1 = __importDefault(require("unzipper"));
const fs_1 = __importDefault(require("fs"));
const download_1 = __importDefault(require("download"));
const helpers_1 = require("../helpers");
const async_wait_until_1 = require("async-wait-until");
const basePath = (0, helpers_1.cachePath)('goIOS');
function goIOSZipExists(platform) {
    return fs_1.default.existsSync(`${basePath}/go-ios-${platform}.zip`);
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const platform = (0, helpers_1.isMac)() ? 'mac' : 'linux';
        const source = `https://github.com/danielpaulus/go-ios/releases/download/v1.0.118/go-ios-${platform}.zip`;
        if (!fs_1.default.existsSync(basePath) || !goIOSZipExists(platform)) {
            console.log('goIOS not found, downloading..');
            if (!fs_1.default.existsSync(basePath))
                fs_1.default.mkdirSync(basePath);
            const path = `${basePath}`;
            yield (0, download_1.default)(source, path);
            yield unzipgoIOS(platform);
            yield setExecutePermission();
        }
        else {
            if (fs_1.default.existsSync(`${basePath}/ios`)) {
                console.log('go-IOS is already downloaded');
            }
            else if (goIOSZipExists(platform)) {
                unzipgoIOS();
            }
        }
    });
}
(() => __awaiter(void 0, void 0, void 0, function* () { return yield main(); }))();
function unzipgoIOS(platform) {
    fs_1.default.createReadStream(`${basePath}/go-ios-${platform}.zip`).pipe(unzipper_1.default.Extract({ path: `${basePath}/` }));
}
function setExecutePermission() {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, async_wait_until_1.waitUntil)(() => fs_1.default.existsSync(`${basePath}/ios`));
        fs_1.default.chmod(`${basePath}/ios`, 0o775, (error) => {
            if (error) {
                console.log(error);
                return;
            }
            console.log('Permissions are changed for the file!');
        });
    });
}
