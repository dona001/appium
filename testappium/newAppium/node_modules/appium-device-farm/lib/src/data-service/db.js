"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ADTDatabase = void 0;
const logger_1 = __importDefault(require("../logger"));
const lokijs_1 = __importDefault(require("lokijs"));
// database class singleton
class ADTDatabase {
    static get DeviceModel() {
        return ADTDatabase.getDeviceModel();
    }
    static get PendingSessionsModel() {
        return ADTDatabase.getPendingSessionsModel();
    }
    static get CLIArgs() {
        return ADTDatabase.getCLIArgs();
    }
    static get db() {
        return ADTDatabase.getDB();
    }
    constructor() {
        this._dbList = [];
        logger_1.default.info('Initializing database');
        ADTDatabase._instance = this;
    }
    static instance() {
        return ADTDatabase._instance || new ADTDatabase();
    }
    static dbname() {
        const appium_home = process.env.APPIUM_HOME || './temp-appium';
        // log.debug(`Using database file: ${appium_home}/db.json`);
        return `${appium_home}/db.json`;
    }
    static getDeviceModel() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield ADTDatabase.getDB()).addCollection('devices');
        });
    }
    static getPendingSessionsModel() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield ADTDatabase.getDB()).addCollection('pending-sessions');
        });
    }
    static getCLIArgs() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield ADTDatabase.getDB()).addCollection('cliArgs');
        });
    }
    static initCollections(db) {
        db.addCollection('devices');
        db.addCollection('pending-sessions');
        db.addCollection('cliArgs');
    }
    static getDB() {
        return __awaiter(this, void 0, void 0, function* () {
            const existingDb = ADTDatabase.instance()._dbList.find((db) => db.dbname === ADTDatabase.dbname());
            if (existingDb)
                return existingDb.db;
            logger_1.default.debug(`Creating new database: ${ADTDatabase.dbname()}`);
            const db = yield new Promise((resolve, reject) => {
                const db = new lokijs_1.default(ADTDatabase.dbname(), {
                    autoload: true,
                    //autosave: true,
                    //autosaveInterval: 4000,
                });
                db.on('autoload', () => {
                    logger_1.default.info('Database autoloaded');
                });
                db.on('error', (err) => {
                    logger_1.default.error(`Error in database: ${err}`);
                    reject(err);
                });
                db.on('loaded', () => {
                    logger_1.default.info('Database loaded');
                    ADTDatabase.initCollections(db);
                    resolve(db);
                });
                db.on('flushChanges', () => {
                    logger_1.default.info('Database changes flushed');
                });
                db.on('close', () => {
                    logger_1.default.info('Database closed');
                });
            });
            ADTDatabase.instance()._dbList.push({ dbname: ADTDatabase.dbname(), db });
            return db;
        });
    }
}
exports.ADTDatabase = ADTDatabase;
