"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleRoot = exports.formatCdVersion = exports.generateLogPrefix = exports.OS = exports.getOsInfo = exports.retrieveData = exports.CD_VER = exports.CD_CDN = exports.getOsName = exports.getChromedriverBinaryPath = exports.getChromeVersion = void 0;
/* eslint-disable @typescript-eslint/no-var-requires */
const lodash_1 = __importDefault(require("lodash"));
const support_1 = require("@appium/support");
const driver_1 = require("appium/driver");
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const teen_process_1 = require("teen_process");
const CD_CDN = process.env.npm_config_chromedriver_cdnurl ||
    process.env.CHROMEDRIVER_CDNURL ||
    'https://chromedriver.storage.googleapis.com';
exports.CD_CDN = CD_CDN;
const OS = {
    linux: 'linux',
    windows: 'win',
    mac: 'mac',
};
exports.OS = OS;
const CD_EXECUTABLE_PREFIX = 'chromedriver';
const MODULE_NAME = 'appium-device-farm';
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION;
exports.CD_VER = CD_VER;
const getModuleRoot = lodash_1.default.memoize(function getModuleRoot() {
    if (!lodash_1.default.isFunction(support_1.node.getModuleRootSync)) {
        const { existsSync, readFileSync } = require('fs');
        let currentDir = path_1.default.dirname(path_1.default.resolve(__filename));
        let isAtFsRoot = false;
        while (!isAtFsRoot) {
            const manifestPath = path_1.default.join(currentDir, 'package.json');
            try {
                if (existsSync(manifestPath) &&
                    JSON.parse(readFileSync(manifestPath, 'utf8')).name === MODULE_NAME) {
                    return currentDir;
                }
                // eslint-disable-next-line no-empty
            }
            catch (ign) { }
            currentDir = path_1.default.dirname(currentDir);
            isAtFsRoot = currentDir.length <= path_1.default.dirname(currentDir).length;
        }
        throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
    }
    const root = support_1.node.getModuleRootSync(MODULE_NAME, __filename);
    if (!root) {
        throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
    }
    return root;
});
exports.getModuleRoot = getModuleRoot;
function getChromeVersion(adb, bundleId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { versionName } = yield adb.getPackageInfo(bundleId);
        return versionName;
    });
}
exports.getChromeVersion = getChromeVersion;
const DOWNLOAD_TIMEOUT_MS = 15 * 1000;
const LATEST_VERSION = 'LATEST';
function formatCdVersion(ver) {
    return __awaiter(this, void 0, void 0, function* () {
        return ver === LATEST_VERSION
            ? (yield retrieveData(`${CD_CDN}/LATEST_RELEASE`, { timeout: DOWNLOAD_TIMEOUT_MS })).trim()
            : ver;
    });
}
exports.formatCdVersion = formatCdVersion;
function getChromedriverBinaryPath(dir, osName = getOsName()) {
    return __awaiter(this, void 0, void 0, function* () {
        const pathSuffix = osName === OS.windows ? '.exe' : '';
        console.log(`${CD_EXECUTABLE_PREFIX}*${pathSuffix}`);
        const paths = yield support_1.fs.glob(`${CD_EXECUTABLE_PREFIX}*${pathSuffix}`, {
            cwd: dir,
            absolute: true,
            nocase: true,
            nodir: true,
        });
        return lodash_1.default.isEmpty(paths)
            ? path_1.default.resolve(dir, `${CD_EXECUTABLE_PREFIX}${pathSuffix}`)
            : lodash_1.default.first(paths);
    });
}
exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
function retrieveData(url, headers, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { timeout = 5000, responseType = 'text' } = opts;
        return (yield (0, axios_1.default)({
            url,
            headers,
            timeout,
            responseType,
        })).data;
    });
}
exports.retrieveData = retrieveData;
const getOsName = lodash_1.default.memoize(function getOsName() {
    if (support_1.system.isWindows()) {
        return OS.windows;
    }
    if (support_1.system.isMac()) {
        return OS.mac;
    }
    return OS.linux;
});
exports.getOsName = getOsName;
const getOsInfo = lodash_1.default.memoize(function getOsInfo() {
    return __awaiter(this, void 0, void 0, function* () {
        let systemHardware = '';
        if (!support_1.system.isWindows()) {
            systemHardware = (0, teen_process_1.exec)('uname', ['-m']).toString();
        }
        return {
            name: getOsName(),
            arch: yield support_1.system.arch(),
            hardwareName: support_1.system.isWindows() ? null : lodash_1.default.trim(systemHardware),
        };
    });
});
exports.getOsInfo = getOsInfo;
// @ts-expect-error
// error TS2345: Argument of type '{}' is not assignable to parameter of type 'DriverOpts<Readonly<Record<string, Constraint>>>'
// Type '{}' is missing the following properties from type 'ServerArgs': address, allowCors, allowInsecure, basePath, and 26 more.
const getBaseDriverInstance = lodash_1.default.memoize(() => new driver_1.BaseDriver({}, false));
/**
 * Generates log prefix string
 *
 * @param {object} obj log owner instance
 * @param {string?} sessionId Optional session identifier
 * @returns {string}
 */
function generateLogPrefix(obj, sessionId) {
    return getBaseDriverInstance().helpers.generateDriverLogPrefix(obj, sessionId);
}
exports.generateLogPrefix = generateLogPrefix;
