"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("./logger"));
const db_1 = require("./data-service/db");
const pluginArgs_1 = require("./data-service/pluginArgs");
const cors_1 = __importDefault(require("cors"));
const async_lock_1 = __importDefault(require("async-lock"));
const axios_1 = __importDefault(require("axios"));
const device_service_1 = require("./data-service/device-service");
const asyncLock = new async_lock_1.default(), serverUpTime = new Date().toISOString();
let dashboardPluginUrl = null;
const router = express_1.default.Router(), apiRouter = express_1.default.Router(), staticFilesRouter = express_1.default.Router();
exports.router = router;
router.use((0, cors_1.default)());
apiRouter.use((0, cors_1.default)());
staticFilesRouter.use((0, cors_1.default)());
/**
 * Middleware to check if the appium-dashboard plugin is installed
 * If the plugin is runnig, then we should enable the react app to
 * open the dashboard link upon clicking the device card in the UI.
 */
apiRouter.use((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    yield asyncLock.acquire('dashboard-plugin-check', () => __awaiter(void 0, void 0, void 0, function* () {
        if (dashboardPluginUrl == null) {
            const pingurl = `${req.protocol}://${req.get('host')}/dashboard/api/ping`;
            try {
                const response = yield axios_1.default.get(pingurl);
                if (response.data['pong']) {
                    dashboardPluginUrl = `${req.protocol}://${req.get('host')}/dashboard`;
                }
                else {
                    dashboardPluginUrl = '';
                }
            }
            catch (err) {
                dashboardPluginUrl = '';
            }
        }
    }));
    req['dashboard-plugin-url'] = dashboardPluginUrl;
    return next();
}));
apiRouter.get('/devices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let devices = (yield db_1.ADTDatabase.DeviceModel).find();
    if (req.query.sessionId) {
        return res.json(devices.find((value) => value.session_id === req.query.sessionId));
    }
    /* dashboard-plugin-url is the base url for opening the appium-dashboard-plugin
     * This value will be attached to all express request via middleware
     */
    const dashboardPluginUrl = req['dashboard-plugin-url'];
    if (dashboardPluginUrl) {
        const sessions = ((_b = (_a = (yield axios_1.default.get(`${dashboardPluginUrl}/api/sessions?start_time=${serverUpTime}`)).data) === null || _a === void 0 ? void 0 : _a.result) === null || _b === void 0 ? void 0 : _b.rows) || [];
        const deviceSessionMap = {};
        sessions.forEach((session) => {
            if (!deviceSessionMap[session.udid]) {
                deviceSessionMap[session.udid] = [];
            }
            deviceSessionMap[session.udid].push(session);
        });
        devices = devices.map((d) => {
            var _a;
            d.dashboard_link = `${dashboardPluginUrl}?device_udid=${d.udid}&start_time=${serverUpTime}`;
            d.total_session_count = ((_a = deviceSessionMap[d.udid]) === null || _a === void 0 ? void 0 : _a.length) || 0;
            return d;
        });
    }
    return res.json(devices);
}));
apiRouter.get('/queues/length', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    res.json((yield db_1.ADTDatabase.PendingSessionsModel).chain().find().count());
}));
apiRouter.get('/queues', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    res.json((yield db_1.ADTDatabase.PendingSessionsModel).chain().find().data());
}));
apiRouter.get('/cliArgs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    res.json(yield (0, pluginArgs_1.getCLIArgs)());
}));
apiRouter.get('/devices/android', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    res.json((yield db_1.ADTDatabase.DeviceModel).find({
        platform: 'android',
    }));
}));
apiRouter.post('/register', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const requestBody = req.body;
    if (req.query.type === 'add') {
        const addedDevices = yield (0, device_service_1.addNewDevice)(requestBody);
        if (addedDevices.length > 0)
            logger_1.default.info(`Added new devices: ${JSON.stringify(addedDevices)}`);
    }
    else if (req.query.type === 'remove') {
        yield (0, device_service_1.removeDevice)(requestBody);
    }
    res.json('200');
}));
apiRouter.post('/block', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const requestBody = req.body;
    const device = yield (0, device_service_1.getDevice)(requestBody);
    if (device != undefined)
        yield (0, device_service_1.userBlockDevice)(device.udid, device.host);
    res.json('200');
}));
apiRouter.post('/unblock', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const requestBody = req.body;
    const device = yield (0, device_service_1.getDevice)(requestBody);
    if (device != undefined)
        yield (0, device_service_1.userUnblockDevice)(device.udid, device.host);
    res.json('200');
}));
apiRouter.get('/devices/ios', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const devices = (yield db_1.ADTDatabase.DeviceModel).find({
        platform: 'ios',
    });
    if (req.query.deviceType === 'real') {
        const realDevices = devices.filter((value) => value.deviceType === 'real');
        res.json(realDevices);
    }
    else if (req.query.deviceType === 'simulated') {
        const simulators = devices.filter((value) => value.deviceType === 'simulator');
        if (Object.hasOwn(req.query, 'booted')) {
            res.json(simulators.filter((value) => value.state === 'Booted'));
        }
        else {
            res.json(simulators);
        }
    }
    else {
        res.json(devices);
    }
}));
staticFilesRouter.use(express_1.default.static(path_1.default.join(__dirname, '..', 'public')));
router.use('/api', apiRouter);
router.use(staticFilesRouter);
