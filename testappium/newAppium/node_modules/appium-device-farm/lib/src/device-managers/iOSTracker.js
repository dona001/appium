"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoIosTracker = void 0;
const lodash_1 = __importDefault(require("lodash"));
const stream_1 = require("stream");
const teen_process_1 = require("teen_process");
const helpers_1 = require("../helpers");
const logger_1 = __importDefault(require("../logger"));
class GoIosTracker extends stream_1.EventEmitter {
    constructor() {
        super();
        this.deviceMap = new Map();
        this.started = true;
    }
    static getInstance() {
        if (!GoIosTracker.instance) {
            GoIosTracker.instance = new GoIosTracker();
        }
        return GoIosTracker.instance;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!lodash_1.default.isNil(this.process) && this.process.isRunning) {
                return;
            }
            let goIOSPath;
            if (process.env.GO_IOS) {
                logger_1.default.info('Found GO_IOS in env');
                goIOSPath = process.env.GO_IOS;
            }
            else {
                goIOSPath = `${(0, helpers_1.cachePath)('goIOS')}/ios`;
            }
            try {
                this.process = new teen_process_1.SubProcess(goIOSPath, ['listen']);
            }
            catch (err) {
                logger_1.default.info(`Failed to load go-ios ${goIOSPath}, iOS real device tracking not possible, please refer to link https://appium-device-farm-eight.vercel.app/troubleshooting/#ios-tracking for more details`);
            }
            this.process.on('lines-stdout', (out) => {
                const parsedOutput = this.parseOutput(out);
                if (!lodash_1.default.isNil(parsedOutput)) {
                    this.notify(parsedOutput);
                }
            });
            this.process.on('exit', () => {
                this.started = false;
                this.emit('stop');
            });
            this.process.start(0);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (lodash_1.default.isNil(this.process) || !this.process.isRunning) {
                return;
            }
            this.process.stop('SIGINT');
            this.started = false;
        });
    }
    parseOutput(output) {
        try {
            if (lodash_1.default.isArray(output)) {
                return output.map((o) => JSON.parse(o));
            }
        }
        catch (err) {
            return null;
        }
    }
    notify(messages) {
        messages.forEach((message) => {
            if (message.MessageType == 'Attached') {
                this.deviceMap.set(message.DeviceID, message.Properties.SerialNumber);
                this.emit('device-connected', {
                    id: message.Properties.SerialNumber,
                });
            }
            else {
                const id = this.deviceMap.get(message.DeviceID);
                this.emit('device-removed', {
                    id,
                });
            }
        });
    }
}
exports.GoIosTracker = GoIosTracker;
