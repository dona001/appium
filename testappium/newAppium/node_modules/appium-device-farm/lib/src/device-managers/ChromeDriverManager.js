"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chromeUtils_1 = require("../chromeUtils");
const appium_chromedriver_1 = require("appium-chromedriver");
class ChromeDriverManager {
    constructor(client, osInfo, mapping, tempDirectory) {
        this.client = client;
        this.osInfo = osInfo;
        this.mapping = mapping;
        this.tempDirectory = tempDirectory;
    }
    static getInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            const shouldParseNotes = true;
            if (!ChromeDriverManager.instance) {
                const tmpRoot = (0, chromeUtils_1.getModuleRoot)();
                const osInfo = yield (0, chromeUtils_1.getOsInfo)();
                const client = new appium_chromedriver_1.ChromedriverStorageClient({
                    chromedriverDir: yield (0, chromeUtils_1.getChromedriverBinaryPath)(tmpRoot),
                });
                const mapping = yield client.retrieveMapping(shouldParseNotes);
                return new ChromeDriverManager(client, osInfo, mapping, tmpRoot);
            }
            return Promise.resolve(ChromeDriverManager.instance);
        });
    }
    downloadChromeDriver(version) {
        return __awaiter(this, void 0, void 0, function* () {
            const osInfo1 = this.osInfo;
            const synchronizedDrivers = yield this.client.syncDrivers({
                osInfo1,
                minBrowserVersion: [yield (0, chromeUtils_1.formatCdVersion)(version)],
            });
            const synchronizedDriversMapping = synchronizedDrivers.reduce((acc, x) => {
                const { version, minBrowserVersion } = this.mapping[x];
                acc[version] = minBrowserVersion;
                return acc;
            }, {});
            const versions = Object.keys(synchronizedDriversMapping);
            const fallBackVersion = `v${versions[versions.length - 1]}`;
            const newVersion = Object.keys(synchronizedDriversMapping).find((k) => synchronizedDriversMapping[k] === version);
            const latestVersion = newVersion !== null && newVersion !== undefined ? `v${newVersion}` : `v${fallBackVersion}`;
            return `${yield (0, chromeUtils_1.getChromedriverBinaryPath)(this.tempDirectory)}/chromedriver_${this.osInfo.name}${this.osInfo.arch}_${latestVersion}`;
        });
    }
}
exports.default = ChromeDriverManager;
