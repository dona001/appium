"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceFarmManager = void 0;
const AndroidDeviceManager_1 = __importDefault(require("./AndroidDeviceManager"));
const IOSDeviceManager_1 = __importDefault(require("./IOSDeviceManager"));
class DeviceFarmManager {
    constructor(platform, deviceTypes, hostPort, pluginArgs) {
        this.deviceTypes = deviceTypes;
        this.pluginArgs = pluginArgs;
        this.deviceManagers = [];
        this.deviceTypes = deviceTypes;
        if (platform.toLowerCase() === 'both') {
            this.deviceManagers.push(new AndroidDeviceManager_1.default(pluginArgs, hostPort));
            this.deviceManagers.push(new IOSDeviceManager_1.default(pluginArgs, hostPort));
        }
        else if (platform.toLowerCase() === 'android') {
            this.deviceManagers.push(new AndroidDeviceManager_1.default(pluginArgs, hostPort));
        }
        else if (platform.toLowerCase() === 'ios') {
            this.deviceManagers.push(new IOSDeviceManager_1.default(pluginArgs, hostPort));
        }
    }
    getDevices(existingDeviceDetails) {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = [];
            for (const deviceManager of this.deviceManagers) {
                devices.push(...(yield deviceManager.getDevices(this.deviceTypes, existingDeviceDetails || [])));
            }
            return devices;
        });
    }
    getMaxSessionCount() {
        return this.pluginArgs.maxSessions;
    }
    deviceInstances() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.deviceManagers;
        });
    }
}
exports.DeviceFarmManager = DeviceFarmManager;
